{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Stack with Objects and Functions (SOF)",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#codeblock"
		},
		{
			"include": "#known-functions"
		},
		{
			"include": "#identifier"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"begin": "\\#\\*",
					"end": "\\*\\#",
					"name": "comment.block.klfr-sof"
				},
				{
					"name": "comment.line.number-sign.klfr-sof",
					"match": "\\#.*"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.klfr-sof",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.klfr-sof",
					"match": "\\\\(f|t|n|\\\"|(?:u([0-9a-fA-F]{4})))"
				}
			]
		},
		"codeblock": {
			"patterns": [
				{
					"name": "meta.function.klfr-sof",
					"begin": "\\b\\{\\b",
					"end": "\\b\\}\\b",
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"identifier": {
			"name": "variable.name.klfr-sof",
			"match": "\\b\\p{L}[\\p{L}0-9_'\\:]*\\b"
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.klfr-sof",
					"match": "\\b(if|return:0|switch|dowhile|while|ifelse|return)\\b|(\\bswitch::)"
				},
				{
					"name": "keyword.operator.arithmetic.klfr-sof",
					"match": "(\\+|\\-|\\*|\\/|\\^)"
				},
				{
					"name": "keyword.operator.boolean.klfr-sof",
					"match": "\\b(and|or|xor|not)\\b"
				},
				{
					"name": "keyword.operator.comparison.klfr-sof",
					"match": "(([\\<\\>\\/]?\\=)|[\\<\\>]|is)"
				},
				{
					"name": "keyword.operator.stack.klfr-sof",
					"match": "\\b(dup|pop|swap)\\b"
				},
				{
					"name": "keyword.operator.string.klfr-sof",
					"match": "\\b(cat)\\b"
				},
				{
					"name": "keyword.other.modularity.klfr-sof",
					"match": "\\b(use|export)\\b"
				},
				{
					"name": "keyword.other.variables.klfr-sof",
					"match": "\\b(def|globaldef|function|constructor|nativecall)\\b|[:\\.;]"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"name": "constant.boolean.klfr-sof",
					"match": "\\b(True|False|true|false)\\b"
				},
				{
					"name": "constant.numeric.decimal.klfr-sof",
					"match": "(\\+|\\-)?(?:([0-9]+)\\.([0-9]+)([eE][\\-\\+][0-9]+)?)"
				},
				{
					"name": "constant.numeric.integer.hex.klfr-sof",
					"match": "((\\+|\\-)?(0[hx])[0-9a-fA-F]+)"
				},
				{
					"name": "constant.numeric.integer.binary.klfr-sof",
					"match": "((\\+|\\-)?(0b)[01]+)"
				},
				{
					"name": "constant.numeric.integer.octal.klfr-sof",
					"match": "((\\+|\\-)?(0o)[0-7]+)"
				},
				{
					"name": "constant.numeric.integer.decimal.klfr-sof",
					"match": "((\\+|\\-)?(0d)?[0-9]+)|0"
				}
			]
		},
		"known-functions": {
			"name":"entity.name.function.klfr-sof",
			"match": "\\b(describe|describes|assert|write|writeln|(convert\\:(int|float|string|callable))|(random\\:(01|int))|input|inputln)\\b"
		}
	},
	"scopeName": "source.klfr-sof"
}